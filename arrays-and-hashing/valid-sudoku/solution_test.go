package validsudoku_test

import (
	"testing"

	solution "github.com/iktzdx/go-neetcode/arrays-and-hashing/valid-sudoku"
)

func Test_IsValidSudoku(t *testing.T) {
	tests := map[string]struct {
		board [][]byte
		want  bool
	}{
		"valid board #1": {
			board: [][]byte{
				{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: true,
		},
		"valid board #2": {
			board: [][]byte{
				{'1', '2', '.', '.', '3', '.', '.', '.', '.'},
				{'4', '.', '.', '5', '.', '.', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '.', '3'},
				{'5', '.', '.', '.', '6', '.', '.', '.', '4'},
				{'.', '.', '.', '8', '.', '3', '.', '.', '5'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '.', '.', '.', '.', '.', '2', '.', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '8'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: true,
		},
		"invalid board #1": {
			board: [][]byte{
				{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: false,
		},
		"invalid board #2": {
			board: [][]byte{
				{'1', '2', '.', '.', '3', '.', '.', '.', '.'},
				{'4', '.', '.', '5', '.', '.', '.', '.', '.'},
				{'.', '9', '1', '.', '.', '.', '.', '.', '3'},
				{'5', '.', '.', '.', '6', '.', '.', '.', '4'},
				{'.', '.', '.', '8', '.', '3', '.', '.', '5'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '.', '.', '.', '.', '.', '2', '.', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '8'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: false,
		},
		"invalid board #3": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '5', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'9', '3', '.', '.', '2', '.', '4', '.', '.'},
				{'.', '.', '7', '.', '.', '.', '3', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '3', '4', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '3', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '5', '2', '.', '.'},
			},
			want: false,
		},
		"invalid board #4": {
			board: [][]byte{
				{'.', '2', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '5', '.', '1'},
				{'.', '.', '.', '.', '.', '.', '8', '1', '3'},
				{'4', '.', '9', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '2', '.', '.', '.', '.', '.', '.'},
				{'7', '.', '6', '.', '.', '.', '.', '.', '.'},
				{'9', '.', '.', '.', '.', '4', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			got := solution.IsValidSudoku(test.board)
			if test.want != got {
				boardStr := formatBoard(test.board)
				t.Fatalf("IsValidSudoku(%s): expected = %v, got = %v", boardStr, test.want, got)
			}
		})
	}
}

func Test_CheckRows(t *testing.T) {
	tests := map[string]struct {
		board [][]byte
		want  bool
	}{
		"valid rows": {
			board: [][]byte{
				{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: true,
		},
		"invalid rows": {
			board: [][]byte{
				{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '9', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: false,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			got := solution.CheckRows(test.board)
			boardStr := formatBoard(test.board)
			if test.want != got {
				t.Fatalf("CheckRows(%s): expected = %v, got = %v", boardStr, test.want, got)
			}
		})
	}
}

func Test_CheckColumns(t *testing.T) {
	tests := map[string]struct {
		board [][]byte
		want  bool
	}{
		"valid columns": {
			board: [][]byte{
				{'1', '2', '.', '.', '3', '.', '.', '.', '.'},
				{'4', '.', '.', '5', '.', '.', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '.', '3'},
				{'5', '.', '.', '.', '6', '.', '.', '.', '4'},
				{'.', '.', '.', '8', '.', '3', '.', '.', '5'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '.', '.', '.', '.', '.', '2', '.', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '8'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: true,
		},
		"invalid columns": {
			board: [][]byte{
				{'1', '2', '.', '.', '3', '.', '.', '.', '.'},
				{'4', '.', '.', '5', '.', '.', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '.', '3'},
				{'5', '.', '.', '.', '6', '.', '.', '.', '4'},
				{'.', '.', '.', '8', '.', '3', '.', '.', '5'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '.', '.', '.', '.', '.', '2', '.', '.'},
				{'.', '.', '.', '5', '1', '9', '.', '.', '8'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: false,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			got := solution.CheckColumns(test.board)
			if test.want != got {
				boardStr := formatBoard(test.board)
				t.Fatalf("CheckColumns(%v): expected = %v, got = %v", boardStr, test.want, got)
			}
		})
	}
}

func Test_CheckBoxes(t *testing.T) {
	tests := map[string]struct {
		board [][]byte
		want  bool
	}{
		"valid boxes": {
			board: [][]byte{
				{'1', '2', '.', '.', '3', '.', '.', '.', '.'},
				{'4', '.', '.', '5', '.', '.', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '.', '3'},
				{'5', '.', '.', '.', '6', '.', '.', '.', '4'},
				{'.', '.', '.', '8', '.', '3', '.', '.', '5'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '.', '.', '.', '.', '.', '2', '.', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '8'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: true,
		},
		"invalid boxes #1": {
			board: [][]byte{
				{'1', '8', '5', '.', '.', '.', '.', '.', '.'},
				{'2', '3', '9', '.', '.', '.', '.', '.', '.'},
				{'1', '7', '6', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #2": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '3', '4', '.', '.', '.', '.', '.', '.'},
				{'1', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'7', '2', '3', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #3": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '5', '8', '.', '.', '.', '.', '.', '.'},
				{'2', '1', '4', '.', '.', '.', '.', '.', '.'},
				{'3', '4', '9', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #4": {
			board: [][]byte{
				{'.', '.', '.', '2', '3', '1', '.', '.', '.'},
				{'.', '.', '.', '.', '5', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '5', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #5": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '3', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '2', '7', '4', '.', '.', '.'},
				{'.', '.', '.', '1', '.', '7', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #6": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '1', '3', '.', '.', '.'},
				{'.', '.', '.', '2', '6', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '4', '6', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #7": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '1'},
				{'.', '.', '.', '.', '.', '.', '.', '3', '2'},
				{'.', '.', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #8": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '5', '.', '2'},
				{'.', '.', '.', '.', '.', '.', '.', '1', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '3', '5'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			},
			want: false,
		},
		"invalid boxes #9": {
			board: [][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '1', '.', '8'},
				{'.', '.', '.', '.', '.', '.', '.', '4', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '1'},
			},
			want: false,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			got := solution.CheckBoxes(test.board)
			if test.want != got {
				boardStr := formatBoard(test.board)
				t.Fatalf("CheckBoxes(%s): expected = %v, got = %v", boardStr, test.want, got)
			}
		})
	}
}

func formatBoard(board [][]byte) string {
	result := "\n"
	for i := 0; i < len(board); i++ {
		if i%3 == 0 && i != 0 {
			result += "------|------|------\n"
		}
		for j := 0; j < len(board[i]); j++ {
			if j%3 == 0 && j != 0 {
				result += "|"
			}
			result += string(board[i][j]) + " "
		}
		result += "\n"
	}
	return result
}
